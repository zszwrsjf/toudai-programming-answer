import numpy as np
def q2(strings):
    # strings = '    0 1 2 3,4 5 6 7,8 9 10 11.12 13 14 15.'
    # print(strings)
    mat = []
    tmp = []
    import re
    regex = re.compile('([\d ]+)(\.|,)')
    ret = regex.findall(strings.strip())
    A = []
    for i in ret:
        tmp = i[0].strip().split(' ')
        if i[1] == '.': # 或者这样text = text.split('.')[0]
            A.append(tmp)
            break
        A.append(tmp)
    # print("rn,cn:" + str(A.shape))
    A = [list(map(int,a)) for a in A]
    return A

# q2()

def q3():
    A = q2('    0 1 2 3,4 5 6 7,8 9 10 11.12 13 14 15.')
    A = np.array(A)
    B = q2('12 13 14,15 16 17,18 19 20,21 22 23.')
    B = np.array(B)
    C = A.dot(B) # 点乘之前一定注意里面不是字符串！！！
    print(C)
    d = C.trace()
    print(d)
# q3()

import collections
class LRUCache:

    def __init__(self, capacity):
        self.capacity = capacity
        self.queue = collections.OrderedDict() # 自动排序 所以如果优先级是跟入堆时间有关 那么可以把value全都看做常数

    def get(self, key):
        if key not in self.queue:
            return -1 # 要找的数据不在缓存中返回-1
        value = self.queue.pop(key) # 将命中缓存的数据移除
        self.queue[key] = value # 将命中缓存的数据重新添加到头部
        return self.queue[key]

    def put(self, key, value):
        if key in self.queue: # 如果已经在缓存中，则先移除老的数据
            self.queue.pop(key)
        elif len(self.queue.items()) == self.capacity:
            self.queue.popitem(last=False) # 如果不在缓存中并且到达最大容量，则把最后的数据淘汰
        self.queue[key] = value # 将新数据添加到头部

def q4(m,n,s):
    ret = 0
    c = LRUCache(s)

    for i in range(m):
        for j in range(m):
            for k in range(n):
                index = k + i * n
                if c.get(index) == -1:
                    ret += 1
                    c.put(index,0)

                index = k * m + j + m * n
                if c.get(index) == -1:
                    ret += 1
                    c.put(index,0)
    return ret

# print(q4(20,15,10))

def q6(m,n,p,s):
    ret = 0
    c = LRUCache(s)
    for u in range(0,m,p):
        for v in range(0,m,p):
            for w in range(0,n,p):
                print(u,v,w)
                for i in range(u,u+p,1):
                    for j in range(v,v+p,1):
                        for k in range(w,w+p,1):
                            index = k + i * n
                            if c.get(index) == -1:
                                ret += 1
                                c.put(index, 0)

                            index = k * m + j + m * n
                            if c.get(index) == -1:
                                ret += 1
                                c.put(index, 0)

    return ret
# print(q6(200,150,50,600))

import math
def q7(m,n,s):
    # p = math.gcd(m,n)
    # cd = [p]
    # for i in range(p-1,0,-1):
    #     if m % i == 0 and n % i == 0:
    #         cd.append(i)
    # mintimes = float('inf')
    # ret = 1
    # for p in cd:
    #     print(p,mintimes)
    #     now = q6(m,n,p,s)
    #     if mintimes > now:
    #         mintimes = now
    #         ret = p
    # return mintimes,ret
    p = math.gcd(m,n)
    cd = [p]
    for i in range(p-1,0,-1):
        if m % i == 0 and n % i == 0:
            cd.append(i)
    for p in cd:
        if p*(p+2) <= s:
            return p
print(q7(200,150,600))